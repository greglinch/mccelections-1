"""
Django settings for elections project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from settings_general import *
from settings_private import *


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

## environment setting
mccelectionsenv = "test"

## Results API base url
MCC_API_BASE_URL = "//<DOMAIN>.com/api"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# secret_key_var = str(os.environ[$SECRET_KEY_MCCELECTIONS])
## imported in settings_private

# SECURITY WARNING: don't run with debug turned on in production!
# debug_setting = str(os.environ[$DEBUG_SETTING]
DEBUG = True

# allowedhosts = str(os.environ[$ALLOWED_HOSTS])
# ALLOWED_HOSTS = allowedhosts
ALLOWED_HOSTS = ['<DOMAIN>.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'results.apps.ResultsConfig',
    # 'rest_framework',
    # 'rest_framework_swagger',
    'debug_toolbar',
    'tastypie',
    # 'django_crontab',
    # 'nested_admin',
]

# CRONJOBS = [
    # ('*/5 * * * *', 'myapp.cron.other_scheduled_job', ['arg1', 'arg2'], {'verbose': 0}),
    # ('* * * * *', 'results.scheduler.test', '>> /tmp/test.log'), ## test
    ## run every day at 2 a.m.
    # ('0 2 * * *', 'results.scheduler.download_elections', '>> /tmp/download_elections.log'),
    # run every day at 3 a.m.
    # ('0 3 * * *', 'results.scheduler.elections_auto', '>> /tmp/election_auto.log'),
    # ('* * * * *', 'django.core.management.call_command', ['download_elections'], '>> /tmp/download_elections.log'),
    # ('* * * * *', 'django.core.management.call_command', ['election_auto'], '>> /tmp/election_auto.log')
# ]

API_LIMIT_PER_PAGE = 0

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'electionsproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'electionsproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    
    'default': {
        'ENGINE': db_engine,
        'NAME': db_name,
        'USER': db_user,
        'PASSWORD': db_password,
        'HOST': db_host,
        'PORT': db_port,
    }
    
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# REST_FRAMEWORK = {
#     ## Use Django's standard `django.contrib.auth` permissions,
#     ## or allow read-only access for unauthenticated users.
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#         # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
#     ],
#     # filtering
#     'DEFAULT_FILTER_BACKENDS': (
#         'rest_framework.filters.DjangoFilterBackend',
#     ),
#     # API rate limiting
#     # 'DEFAULT_THROTTLE_CLASSES': (
#     #     'rest_framework.throttling.AnonRateThrottle',
#     #     'rest_framework.throttling.UserRateThrottle'
#     # ),
#     # 'DEFAULT_THROTTLE_RATES': {
#     #     'burst': '1/min',
#     #     'sustained': '1000/day',
#     # },
#     ## pagination
#     # 'PAGE_SIZE': 100
# }
